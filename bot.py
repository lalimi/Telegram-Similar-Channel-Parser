import asyncio
import csv
from io import StringIO, BytesIO

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, MessageHandler, filters
)
import config
from main import SimilarChannelParser, parse_username_from_line, parse_line_to_dict

# –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
AUTHORIZED_USERS = [501410189, 480322199]  # lalimi, illiaholovko

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
ASK_CHANNEL_LEVEL1, ASK_CHANNEL_LEVEL2 = range(2)

# –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (inline)
def get_main_keyboard(user_id):
    buttons = [
        [InlineKeyboardButton("üîç –ü–∞—Ä—Å–∏–Ω–≥ Level 1 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="level1")]
    ]
    if user_id in AUTHORIZED_USERS:
        buttons.append([InlineKeyboardButton("üèÜ –ü–∞—Ä—Å–∏–Ω–≥ Level 2 (PRO)", callback_data="level2")])
    else:
        buttons.append([InlineKeyboardButton("üèÜ –ü–∞—Ä—Å–∏–Ω–≥ Level 2 (PRO)", callback_data="level2")])
    buttons.append([InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")])
    return InlineKeyboardMarkup(buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥"
def get_back_keyboard():
    return ReplyKeyboardMarkup([["‚¨ÖÔ∏è–ù–∞–∑–∞–¥"]], resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Ö–æ–∂–∏–µ Telegram-–∫–∞–Ω–∞–ª—ã –Ω–∞ –æ–¥–Ω–æ–º –∏–ª–∏ –¥–≤—É—Ö —É—Ä–æ–≤–Ω—è—Ö –∏ –≤—ã–¥–∞—é –æ—Ç—á—ë—Ç.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(user.id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    if query.data == "level1":
        await context.bot.send_message(
            chat_id=user_id,
            text="–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Level 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, @target_channel):",
            reply_markup=get_back_keyboard()
        )
        return ASK_CHANNEL_LEVEL1
    elif query.data == "level2":
        if user_id not in AUTHORIZED_USERS:
            await context.bot.send_message(
                chat_id=user_id,
                text="Level 2 (PRO) –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ ‚Äî –Ω–∞–ø–∏—à–∏ @lalimi.",
                reply_markup=get_main_keyboard(user_id)
            )
            return ConversationHandler.END
        await context.bot.send_message(
            chat_id=user_id,
            text="–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Level 2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, @target_channel):",
            reply_markup=get_back_keyboard()
        )
        return ASK_CHANNEL_LEVEL2
    elif query.data == "help":
        await help_msg(update, context)
        return ConversationHandler.END

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
async def help_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "üìä <b>Telegram Similar Channel Parser</b> ‚Äî –∏—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏—à–∏.\n"
        "üîπ <b>Level 1</b> ‚Äî –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö)\n"
        "üî∏ <b>Level 2 (PRO)</b> ‚Äî –≥–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ (–ø–æ –ø–æ–¥–ø–∏—Å–∫–µ)\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏ username –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>@target_channel</code>)\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä—è–º–æ —Å—é–¥–∞ ‚Äî —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º CSV\n\n"
        "üí° –•–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø –∫ Level 2? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ <a href='https://t.me/lalimi'>@lalimi</a> –≤ Telegram!\n"
        "üí∏ –û–ø–ª–∞—Ç–∞ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç\n\n"
        "‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á—É –∏ –ø–æ–º–æ–≥—É!\n"
        "–í–∞—à –±–æ—Ç üî•"
    )
    if update.callback_query:
        await update.callback_query.edit_message_text(txt, parse_mode="HTML", reply_markup=get_main_keyboard(update.effective_user.id))
    else:
        await update.message.reply_text(txt, parse_mode="HTML", reply_markup=get_main_keyboard(update.effective_user.id))

# Level 1: –∑–∞–ø—Ä–æ—Å username
async def ask_channel_level1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
        return ConversationHandler.END

    username = update.message.text.strip().lstrip("@")
    user_id = update.effective_user.id

    await update.message.reply_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ Level 1, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

    try:
        channels = await parser.get_similar_channels(username)
        if not channels:
            await update.message.reply_text("–ü–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_main_keyboard(user_id))
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV-—Ç–∞–±–ª–∏—Ü—É
            output = StringIO()
            writer = csv.DictWriter(
                output,
                fieldnames=["–°—Å—ã–ª–∫–∞", "–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"],
                delimiter=","
            )
            writer.writeheader()
            for line in channels:
                parsed = parse_line_to_dict(line, config.LINE_FORMAT)
                if parsed:
                    writer.writerow({
                        "–°—Å—ã–ª–∫–∞": f"https://t.me/{parsed.get('username')}",
                        "–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤": parsed.get("participants_count"),
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞": parsed.get("title"),
                    })
            csv_bytes = BytesIO(output.getvalue().encode("utf-8"))
            csv_bytes.name = f"{username}_level1_report.csv"
            csv_bytes.seek(0)
            await update.message.reply_document(document=csv_bytes, filename=csv_bytes.name)
            await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à Level 1 –æ—Ç—á—ë—Ç.", reply_markup=get_main_keyboard(user_id))
    except Exception as exc:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {exc}", reply_markup=get_main_keyboard(user_id))

    return ConversationHandler.END
async def ask_channel_level2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
        return ConversationHandler.END

    username = update.message.text.strip().lstrip("@")
    user_id = update.effective_user.id

    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text(
            "Level 2 (PRO) –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ ‚Äî –Ω–∞–ø–∏—à–∏ @lalimi.",
            reply_markup=get_main_keyboard(user_id)
        )
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    waiting_msg = await update.message.reply_text(
        "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –≥–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥‚Ä¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
    )

    async def do_parsing_and_send(user_id, username, wait_msg_id, context):
        try:
            channels_l1 = await parser.get_similar_channels(username)
            if not channels_l1:
                await context.bot.delete_message(chat_id=user_id, message_id=wait_msg_id)
                await context.bot.send_message(user_id, "–ù–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            level2_data = []
            for line in channels_l1:
                uname = parse_username_from_line(line, config.LINE_FORMAT)
                if uname:
                    channels_l2 = await parser.get_similar_channels(uname)
                    for l2 in channels_l2:
                        parsed = parse_line_to_dict(l2, config.LINE_FORMAT)
                        if parsed:
                            subs = parsed.get("participants_count")
                            try:
                                subs_num = int(str(subs).replace(" ", ""))
                            except Exception:
                                subs_num = 0
                            over_50k_value = subs_num if subs_num > 50000 else ""
                            level2_data.append({
                                "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª": uname,
                                "–°—Å—ã–ª–∫–∞": f"https://t.me/{parsed.get('username')}",
                                "–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤": parsed.get("participants_count"),
                                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞": parsed.get("title"),
                                "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–≤—ã—à–µ 50k": over_50k_value,
                            })
                await asyncio.sleep(getattr(config, "DELAY_BETWEEN_REQUESTS", 1.5))

            output = StringIO()
            writer = csv.DictWriter(
                output,
                fieldnames=[
                    "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª",
                    "–°—Å—ã–ª–∫–∞",
                    "–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                    "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–≤—ã—à–µ 50k"
                ],
                delimiter=","
            )
            writer.writeheader()
            for row in level2_data:
                writer.writerow(row)
            csv_bytes = BytesIO(output.getvalue().encode("utf-8"))
            csv_bytes.name = f"{username}_level2_report.csv"
            csv_bytes.seek(0)

            await context.bot.delete_message(chat_id=user_id, message_id=wait_msg_id)
            await context.bot.send_document(
                chat_id=user_id,
                document=csv_bytes,
                filename=csv_bytes.name,
                caption="–ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à Level 2 –æ—Ç—á—ë—Ç.",
            )
        except Exception as exc:
            await context.bot.delete_message(chat_id=user_id, message_id=wait_msg_id)
            await context.bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {exc}")

    asyncio.create_task(
        do_parsing_and_send(user_id, username, waiting_msg.message_id, context)
    )

    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

def main():
    global parser
    parser = SimilarChannelParser()  # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    app = ApplicationBuilder().token(config.BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CallbackQueryHandler(menu_handler)],
        states={
            ASK_CHANNEL_LEVEL1: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_channel_level1)],
            ASK_CHANNEL_LEVEL2: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_channel_level2)],
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True,
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("help", help_msg))

    print("–ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PRO Level 2‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
